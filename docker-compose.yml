services:
  web:
    build: .
    command: >
      sh -c "export PYTHONPATH=/code/backend &&
             python /wait-for-db.py &&
             if [ \"$DJANGO_ENV\" = 'prod' ]; then
               gunicorn config.wsgi:application --bind 0.0.0.0:5000 --timeout 180 --limit-request-line 65536 --limit-request-field_size 65536;
             else
               python backend/manage.py runserver 0.0.0.0:5000;
             fi"
    ports:
      - "5000:5000"
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    labels:
      - traefik.enable=true
      - traefik.http.routers.webrouter.rule=Host(`solarcargo.commitandpray.com`)
      - traefik.http.routers.webrouter.entrypoints=websecure
      - traefik.http.routers.webrouter.tls=true
      - traefik.http.middlewares.uploadlimit.buffering.maxRequestBodyBytes=104857600
      - traefik.http.routers.webrouter.middlewares=uploadlimit


  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"

  redis:
    image: redis:7
    command: ["redis-server", "--appendonly", "no"]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    restart: unless-stopped

  worker:
    build: .
    command: >
      sh -c "echo 'Waiting for Redis...' && \
             until redis-cli -h redis ping | grep -q PONG; do echo 'redis not ready, sleeping 1s'; sleep 1; done; \
             echo 'Redis is ready'; export PYTHONPATH=/code/backend; \
             celery -A config.celery worker --loglevel=info --concurrency=2"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/code/backend
    working_dir: /code/backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: on-failure
    volumes:
      - .:/code

volumes:
  postgres_data:
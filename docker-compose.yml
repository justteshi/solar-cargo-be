services:
  web:
    build: .
    command: >
      sh -c "export PYTHONPATH=/code/backend &&
             python /wait-for-db.py &&
             if [ \"$DJANGO_ENV\" = 'prod' ]; then
               gunicorn config.wsgi:application --bind 0.0.0.0:5000 --timeout 120 --limit-request-line 8190 --limit-request-field_size 8190;
             else
               python backend/manage.py runserver 0.0.0.0:5000;
             fi"
    ports:
      - "5000:5000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.custom-timeouts.forwardingTimeouts.dialTimeout=120s
      - traefik.http.middlewares.custom-timeouts.forwardingTimeouts.responseHeaderTimeout=120s
      - traefik.http.routers.web-secure.middlewares=custom-timeouts
      - traefik.http.routers.web-secure.entryPoints=https
      - traefik.http.routers.web-secure.rule=Host(`solarcargo.commitandpray.com`)
      - traefik.http.routers.web-secure.tls=true
      - traefik.http.services.web.loadbalancer.server.port=5000


  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"

volumes:
  postgres_data: